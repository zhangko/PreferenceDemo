package greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import greendao.Staff;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STAFF.
*/
public class StaffDao extends AbstractDao<Staff, Long> {

    public static final String TABLENAME = "STAFF";

    /**
     * Properties of entity Staff.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property DepartmentID = new Property(3, String.class, "departmentID", false, "DEPARTMENT_ID");
        public final static Property DepartmentCode = new Property(4, String.class, "departmentCode", false, "DEPARTMENT_CODE");
        public final static Property Mobile = new Property(5, String.class, "mobile", false, "MOBILE");
        public final static Property Telephone = new Property(6, String.class, "telephone", false, "TELEPHONE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Gender = new Property(8, Integer.class, "gender", false, "GENDER");
        public final static Property IsMainDepartment = new Property(9, Integer.class, "isMainDepartment", false, "IS_MAIN_DEPARTMENT");
    };


    public StaffDao(DaoConfig config) {
        super(config);
    }
    
    public StaffDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STAFF' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'CODE' TEXT," + // 2: code
                "'DEPARTMENT_ID' TEXT," + // 3: departmentID
                "'DEPARTMENT_CODE' TEXT," + // 4: departmentCode
                "'MOBILE' TEXT," + // 5: mobile
                "'TELEPHONE' TEXT," + // 6: telephone
                "'EMAIL' TEXT," + // 7: email
                "'GENDER' INTEGER," + // 8: gender
                "'IS_MAIN_DEPARTMENT' INTEGER);"); // 9: isMainDepartment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STAFF'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Staff entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String departmentID = entity.getDepartmentID();
        if (departmentID != null) {
            stmt.bindString(4, departmentID);
        }
 
        String departmentCode = entity.getDepartmentCode();
        if (departmentCode != null) {
            stmt.bindString(5, departmentCode);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(6, mobile);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(7, telephone);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        Integer gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(9, gender);
        }
 
        Integer isMainDepartment = entity.getIsMainDepartment();
        if (isMainDepartment != null) {
            stmt.bindLong(10, isMainDepartment);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Staff readEntity(Cursor cursor, int offset) {
        Staff entity = new Staff( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // departmentID
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // departmentCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // mobile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // telephone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // gender
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // isMainDepartment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Staff entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepartmentID(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartmentCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMobile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTelephone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setGender(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsMainDepartment(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Staff entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Staff entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
